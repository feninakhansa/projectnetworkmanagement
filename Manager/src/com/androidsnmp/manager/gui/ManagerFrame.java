/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.androidsnmp.manager.gui;

import com.androidsnmp.manager.main.AndroidSNMPManager;
import com.androidsnmp.manager.main.SNMPMessenger;
import com.androidsnmp.manager.models.ManagedDevice;
import java.awt.CardLayout;
import java.net.SocketException;

import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author brnunes
 */
public class ManagerFrame extends javax.swing.JFrame {
    private static final String blank = "blank";
    private CardLayout cardLayout;
    private AndroidSNMPManager androidSMNPManager;
    
    /**
     * Creates new form ManagerFrame
     */
    public ManagerFrame(AndroidSNMPManager androidSNMPManager) {
        this.androidSMNPManager = androidSNMPManager;
        
        initComponents();
        
        cardLayout = new CardLayout();
        dummyPhonePanel.setLayout(cardLayout);
        
        cardLayout.addLayoutComponent(new JPanel(), blank);
        
        devicesList.setCellRenderer(new ManagedDeviceCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        devicesListScrollPane = new javax.swing.JScrollPane();
        devicesList = new javax.swing.JList(androidSMNPManager.getSampleModel());
        dummyPhonePanel = new javax.swing.JPanel();
        addDeviceButton = new javax.swing.JButton();
        editDeviceButton = new javax.swing.JButton();
        removeDeviceButton = new javax.swing.JButton();
        RangeLabel = new javax.swing.JLabel();
        rangeBeginTextField = new javax.swing.JTextField();
        rangeEndTextField = new javax.swing.JTextField();
        discoverButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Android SNMP Manager");
        setResizable(false);

        devicesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                devicesListValueChanged(evt);
            }
        });
        devicesListScrollPane.setViewportView(devicesList);

        dummyPhonePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        dummyPhonePanel.setPreferredSize(new java.awt.Dimension(640, 360));
        dummyPhonePanel.setLayout(null);

        addDeviceButton.setText("Add");
        addDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeviceButtonActionPerformed(evt);
            }
        });

        editDeviceButton.setText("Edit");
        editDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDeviceButtonActionPerformed(evt);
            }
        });

        removeDeviceButton.setText("Remove");
        removeDeviceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDeviceButtonActionPerformed(evt);
            }
        });

        RangeLabel.setText("Enter range of IPs to discover:");
        
        String address = null;
        
        try {
			address = androidSMNPManager.getLocalNetworkBroadcastAddress();
		} catch (SocketException e) {
			e.printStackTrace();
		}
        
        if(address != null && address.endsWith("255")) {
        	address = address.substring(0, address.length() - 3);
        } else {
        	address = "192.168.0.";
        }

        rangeBeginTextField.setText(address + "1");
        rangeBeginTextField.setToolTipText("Enter the first address of the range");
        rangeBeginTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        rangeBeginTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rangeBeginTextFieldFocusGained(evt);
            }
        });

        rangeEndTextField.setText(address + "254");
        rangeEndTextField.setToolTipText("Enter the last address of the range");
        rangeEndTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rangeEndTextFieldFocusGained(evt);
            }
        });

        discoverButton.setText("Discover");
        discoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoverButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rangeBeginTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rangeEndTextField))
                        .addGap(18, 18, 18)
                        .addComponent(discoverButton))
                    .addComponent(RangeLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addDeviceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editDeviceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDeviceButton))
                    .addComponent(devicesListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dummyPhonePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dummyPhonePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(devicesListScrollPane)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addDeviceButton)
                            .addComponent(removeDeviceButton)
                            .addComponent(editDeviceButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RangeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rangeBeginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discoverButton)
                            .addComponent(rangeEndTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeviceButtonActionPerformed
        String ip = "___.___.___.___";
        
        do {
            ip = (String) JOptionPane.showInputDialog(this, "Enter the IP address of the device:",
                    "Add Device", JOptionPane.PLAIN_MESSAGE, null, null, ip);

            if (ip != null) {
                if (ManagedDevice.isIpValid(ip)) {
                    if (androidSMNPManager.hasDevice(ip)) {
                        JOptionPane.showMessageDialog(this, "There is already one device with this IP!");
                    } else {
                        addDevice(ip);
                        break;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid IP Address!\nMake sure the IP is in the format [0..255].[0..255].[0..255].[0..255]");
                }
            }
        } while (ip != null);
    }//GEN-LAST:event_addDeviceButtonActionPerformed

    private void devicesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_devicesListValueChanged
        if(devicesList.getSelectedIndex() == -1) {
            cardLayout.show(dummyPhonePanel, blank);
        } else {
            ManagedDevice device = androidSMNPManager.getManagedDevice(devicesList.getSelectedIndex());
            cardLayout.show(dummyPhonePanel, device.getIp());
        }
    }//GEN-LAST:event_devicesListValueChanged

    private void editDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDeviceButtonActionPerformed
        int selectedIndex = devicesList.getSelectedIndex();
        String ip = androidSMNPManager.getManagedDevice(selectedIndex).getIp();
        
        do {
            ip = (String) JOptionPane.showInputDialog(this, "Enter the IP address of the device:",
                    "Edit Device", JOptionPane.PLAIN_MESSAGE, null, null, ip);

            if (ip != null) {
                if (ManagedDevice.isIpValid(ip)) {
                    if (androidSMNPManager.hasDevice(ip)) {
                        JOptionPane.showMessageDialog(this, "There is already one device with this IP!");
                    } else {
                        androidSMNPManager.removeManagedDevice(selectedIndex);
                        ManagedDevice device = new ManagedDevice(ip);
                        androidSMNPManager.addManagedDevice(device, selectedIndex);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid IP Address!\nMake sure the IP is in the format [0..255].[0..255].[0..255].[0..255]");
                }
            }
        } while (ip != null);
    }//GEN-LAST:event_editDeviceButtonActionPerformed

    private void removeDeviceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDeviceButtonActionPerformed
        if(devicesList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "No device selected!");
        } else {
            if(JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this device?",
                    "Remove '" + androidSMNPManager.getManagedDevice(devicesList.getSelectedIndex()).getIp() + "'?",
                    JOptionPane.YES_NO_OPTION) == 0) {
                androidSMNPManager.removeManagedDevice(devicesList.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_removeDeviceButtonActionPerformed

    private void discoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discoverButtonActionPerformed
        if(ManagedDevice.isIpValid(rangeBeginTextField.getText())) {
            if(ManagedDevice.isIpValid(rangeEndTextField.getText())) {
                int[] begin = new int[4];
                int[] end = new int[4];

                String[] result = rangeBeginTextField.getText().split("\\.");
                for(int i = 0; i < 4; i++) {
                    begin[i] = Integer.parseInt(result[i]);
                }

                result = rangeEndTextField.getText().split("\\.");
                for(int i = 0; i < 4; i++) {
                    end[i] = Integer.parseInt(result[i]);
                }
                
                if(begin[0] != end[0] || begin[1] != end[1] || begin[2] != end[2]) {
                    JOptionPane.showMessageDialog(this, "Range too big!");
                    rangeEndTextField.requestFocus();
                } else {
                    if(begin[3] > end[3]) {
                        int temp = begin[3];
                        begin[3] = end[3];
                        end[3] = temp;
                    }
                    SNMPMessenger.discoverDevices(begin, end, this);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid IP address!");
                rangeEndTextField.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid IP address!");
            rangeBeginTextField.requestFocus();
        }
    }//GEN-LAST:event_discoverButtonActionPerformed

    private void rangeBeginTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rangeBeginTextFieldFocusGained
        rangeBeginTextField.selectAll();
    }//GEN-LAST:event_rangeBeginTextFieldFocusGained

    private void rangeEndTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rangeEndTextFieldFocusGained
        rangeEndTextField.selectAll();
    }//GEN-LAST:event_rangeEndTextFieldFocusGained

    public void addPhonePanel(ManagedDevice device, Object constraints) {
        dummyPhonePanel.add(device.getPhonePanel(), constraints);
        devicesList.setSelectedValue(device, true);
        device.updateEverything();
    }
    
    public void removePhonePanel(PhonePanel phonePanel) {
        dummyPhonePanel.remove(phonePanel);
    }
    
    public ManagedDevice addDevice(String ip) {
        if(!androidSMNPManager.hasDevice(ip)) {
            ManagedDevice device = new ManagedDevice(ip);
            androidSMNPManager.addManagedDevice(device);
            return device;
        }
        
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RangeLabel;
    private javax.swing.JButton addDeviceButton;
    private javax.swing.JList devicesList;
    private javax.swing.JScrollPane devicesListScrollPane;
    private javax.swing.JButton discoverButton;
    private javax.swing.JPanel dummyPhonePanel;
    private javax.swing.JButton editDeviceButton;
    private javax.swing.JTextField rangeBeginTextField;
    private javax.swing.JTextField rangeEndTextField;
    private javax.swing.JButton removeDeviceButton;
    // End of variables declaration//GEN-END:variables
}
